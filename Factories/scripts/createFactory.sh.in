#! /bin/bash

# Abort script if any command fails
set -e

# These variables are replaced by cmake
PROJECT_DIR="@PROJECT_SOURCE_DIR@"
EXTERNAL_DIR="@EXTERNAL_DIR@"
TEMPLATES_DIR="@PROJECT_SOURCE_DIR@/templates"
COMMON_TOOLS_ROOT="@PROJECT_SOURCE_DIR@/.."

SKELETON=$1
CONFIG=$2
OUTPUT=$3

if [ -d "$OUTPUT" ]; then
    echo "Error: output folder $OUTPUT already exist"
    exit 1
fi

if [ ! -e "$CONFIG" ]; then
    echo "Error: python configuration file does not exist"
    exit 1
fi

# Create output folder
mkdir -p "$OUTPUT/build/external"
mkdir -p "$OUTPUT/scripts"

# Copy files
cp -r "$COMMON_TOOLS_ROOT/cmake" "$OUTPUT"
cp -r "$COMMON_TOOLS_ROOT/common" "$OUTPUT"
cp "$TEMPLATES_DIR/generateHeader.sh" "$OUTPUT/"

cp -r "$EXTERNAL_DIR/src" "$OUTPUT/build/external/"
cp -r "$EXTERNAL_DIR/lib" "$OUTPUT/build/external/"
cp -r "$EXTERNAL_DIR/include" "$OUTPUT/build/external/"

cp -r $COMMON_TOOLS_ROOT/external/src/* "$OUTPUT/build/external/src/"
cp -r $COMMON_TOOLS_ROOT/external/include/* "$OUTPUT/build/external/include/"

cp "$PROJECT_DIR/scripts/parallelizedFactory.py.in" "$OUTPUT/scripts/"

# Generate C++ code
@PROJECT_BINARY_DIR@/@EXECUTABLE@ -i "$SKELETON" -o "$OUTPUT" $CONFIG

pushd "$OUTPUT/build" &> /dev/null


set +e
chosen_CXX=""
command -v clang++ >/dev/null 2>&1
if [[ $? -eq 0 ]]; then
    chosen_CXX="clang++"
fi
set -e

CXX=${chosen_CXX} cmake .. && make -j 4

popd &> /dev/null

echo "@NAME@ is ready in '$OUTPUT/build'"
